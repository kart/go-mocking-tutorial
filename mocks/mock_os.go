// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kart/go-mocking-tutorial/base (interfaces: Os)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	base "github.com/kart/go-mocking-tutorial/base"
	os "os"
	reflect "reflect"
)

// MockOs is a mock of Os interface
type MockOs struct {
	ctrl     *gomock.Controller
	recorder *MockOsMockRecorder
}

// MockOsMockRecorder is the mock recorder for MockOs
type MockOsMockRecorder struct {
	mock *MockOs
}

// NewMockOs creates a new mock instance
func NewMockOs(ctrl *gomock.Controller) *MockOs {
	mock := &MockOs{ctrl: ctrl}
	mock.recorder = &MockOsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOs) EXPECT() *MockOsMockRecorder {
	return m.recorder
}

// Chdir mocks base method
func (m *MockOs) Chdir(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chdir", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chdir indicates an expected call of Chdir
func (mr *MockOsMockRecorder) Chdir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chdir", reflect.TypeOf((*MockOs)(nil).Chdir), arg0)
}

// Create mocks base method
func (m *MockOs) Create(arg0 string) (base.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(base.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockOsMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOs)(nil).Create), arg0)
}

// Executable mocks base method
func (m *MockOs) Executable() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Executable")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Executable indicates an expected call of Executable
func (mr *MockOsMockRecorder) Executable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Executable", reflect.TypeOf((*MockOs)(nil).Executable))
}

// Exit mocks base method
func (m *MockOs) Exit(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Exit", arg0)
}

// Exit indicates an expected call of Exit
func (mr *MockOsMockRecorder) Exit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exit", reflect.TypeOf((*MockOs)(nil).Exit), arg0)
}

// Getenv mocks base method
func (m *MockOs) Getenv(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getenv", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Getenv indicates an expected call of Getenv
func (mr *MockOsMockRecorder) Getenv(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getenv", reflect.TypeOf((*MockOs)(nil).Getenv), arg0)
}

// Getpid mocks base method
func (m *MockOs) Getpid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getpid")
	ret0, _ := ret[0].(int)
	return ret0
}

// Getpid indicates an expected call of Getpid
func (mr *MockOsMockRecorder) Getpid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getpid", reflect.TypeOf((*MockOs)(nil).Getpid))
}

// Getwd mocks base method
func (m *MockOs) Getwd() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getwd")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Getwd indicates an expected call of Getwd
func (mr *MockOsMockRecorder) Getwd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getwd", reflect.TypeOf((*MockOs)(nil).Getwd))
}

// Hostname mocks base method
func (m *MockOs) Hostname() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hostname")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hostname indicates an expected call of Hostname
func (mr *MockOsMockRecorder) Hostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hostname", reflect.TypeOf((*MockOs)(nil).Hostname))
}

// LookupEnv mocks base method
func (m *MockOs) LookupEnv(arg0 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupEnv", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LookupEnv indicates an expected call of LookupEnv
func (mr *MockOsMockRecorder) LookupEnv(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupEnv", reflect.TypeOf((*MockOs)(nil).LookupEnv), arg0)
}

// Open mocks base method
func (m *MockOs) Open(arg0 string) (base.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(base.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockOsMockRecorder) Open(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockOs)(nil).Open), arg0)
}

// OpenFile mocks base method
func (m *MockOs) OpenFile(arg0 string, arg1 int, arg2 os.FileMode) (base.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(base.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile
func (mr *MockOsMockRecorder) OpenFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockOs)(nil).OpenFile), arg0, arg1, arg2)
}

// Remove mocks base method
func (m *MockOs) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockOsMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockOs)(nil).Remove), arg0)
}

// Stat mocks base method
func (m *MockOs) Stat(arg0 string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", arg0)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat
func (mr *MockOsMockRecorder) Stat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockOs)(nil).Stat), arg0)
}
